<?php
declare(strict_types=1);

namespace [[namespace]];

[[use]]

use models\CurrentUser;
use QuickDRY\Connectors\QueryExecuteResult;
use DateTime;

/**
 *
 * [[c_name]]
 * @author Ben Kucenski <bkucenski@gmail.com>
 * generated by QuickDRY
 *
[[class_props]];
 *
 */

class db_[[c_name]] extends [[DatabaseClassName]]
{
    protected static ?bool $_use_change_log = [[change_log]];

    public static array $_primary = [[primary]];
    public static array $_unique = [
    [[unique]]
    ];

    public static array $_indexes = [
    [[indexes]]
    ];

    protected static string $database = [[database]];
    protected static string $table = '[[table_name]]';
    protected static string $DatabasePrefix = '[[DatabasePrefix]]';
    protected static string $DatabaseTypePrefix = '[[DatabaseTypePrefix]]';
    protected static int $LowerCaseTable = [[LowerCaseTable]];

    public const string TABLE = '[[table_name]]';

    [[class_const]]

    protected static array $prop_definitions = [
        [[prop_definitions]]
    ];

    [[foreign_key_props]]

    /**
     * @param string $name
     * @return mixed
     */
    public function __get(string $name)
    {
        [[gets]]

        return parent::__get($name);
    }

    /**
     * @param string $name
     * @param mixed $value
     * @return mixed
     */
    public function __set(string $name, mixed $value)
    {
        [[sets]]

        return parent::__set($name, $value);
    }

    /**
     * @param array $req
     * @param bool $save
     * @param bool $keep_existing_values
     * @return QueryExecuteResult
     */
    public function FromRequest(
        array $req,
        bool $save = true,
        bool $keep_existing_values = true
    ): QueryExecuteResult
    {
        return parent::FromRequest($req, $save, $keep_existing_values);
    }

    /**
     * @return bool
     */
    public function IsReferenced(): bool
    {
        return [[IsReferenced]];
    }

    /**
     * @return bool
     */
    public function VisibleTo(): bool
    {
        if(!CurrentUser::$id) {
            return false;
        }

        if(CurrentUser::Is([ROLE_ID_ADMIN])) {
            return true;
        }

        [[HasUserLink]]

        return false;
    }

    /**
     * @return bool
     */
    public function CanDelete(): bool
    {
        if(!CurrentUser::$id) {
            return false;
        }

        if(CurrentUser::Is([ROLE_ID_ADMIN])) {
            return true;
        }

        [[HasUserLink]]

        return false;
    }

    /**
     * @param array|null $where
     *
     * @return static|null
     */
    public static function Get(?array $where = null): ?static
    {
        return parent::Get($where);
    }

    /**
     * @param array|null $where
     * @param array|null $order_by
     * @param int|null $limit
     *
     * @return static[]|null
     */
    public static function GetAll(?array $where = null, ?array $order_by = null, ?int $limit = null): ?array
    {
		  return parent::GetAll($where, $order_by, $limit);
    }
}